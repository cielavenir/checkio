tests={
	("CGCTA", "TACCG"): "CG,TA",
	("TGCAAAACGT", "ACGTAAAATGCA"): "CAAAAT,GAAAAT,TAAAAT",
	("GGGCCCAAA", "AAACCCGGGG"): "AAA,CCC,GGG",
	("CCCATTCACGT", "TGGCGACCGGGATCGTACTT"): "CCCATCACT", # I think "CCCATCACT,CCCATTACT" is correct...
	("CATATGTGTACTGC", "GCCGACCGCTGTCATTAATATACAGTTCGAA"): "CATATTTATGC", # I think "CATATTTACTG,CATATTTATGC"
	("TAGTCTTCTGGTCTAAATCCCTGCAGGAATATGCAAACTGG", "TCCTGATCTCATGGT"): "TCCTGATCTCATGG", # "TCCTGATCTCAGGT,TCCTGATCTCATGG"
	("GGAGTACCATGGGCGGGACGTCACAGCCCCCAACTCA", "AAGGTGACGCAAATGGTATATTCGCTAAGGATT"): "AGTACCATGGATACGCAAA,GGTACCATGGATACGCAAA",
	("AGTAATAATATGCTTCGGCTTTA", "CGCGGGCAGTATC"): "CCGGCTA,GCGGCTA",
	("TGACTGACAACGACTGGAGCATCTCGTATGGTAGTTTTTCGTTATCTCTGGGACCAGGACCTTCCAAGGCTCAAGGAGGACGTGCCCGGATTAGCGCCGGGGGCTCGACATCGCTCACCACCCATGGTCGTGTTCCTCCGATGCTCCATATCCCCCGCAGGATCAGTGCTATAT", "GCGTTAAAAAGATACTGCCCGCTAGGTTGTTCGGTACGCTTACAGGTGGGGGACCCGACAGCTGTAATGTGTTCTAACAAGCCCCGTTGCTAAACCTCATAGAGACCCATCGCCCGCGGACAAGG"): "GCGAAAAAGATCTCGTAGGTTGTTCGGACGCTTAAGGTGGGGGCCCGACGCTGAATGTCACACCCCGTTTCCTCATGCCCATCCCCGCGGACAGG", # "GCTAAAGACTGCCCGTAGGTTGTTCGGACGCTTCAGGTGGGGACCCGAAGCGTAATGCTCACCCCGTTGTCCTCGAGCCCATCCCCGCGGACAGG"
	("ACCTGACATAAGTGACGGGTAGAGCCTCAGAGGTAGAAGTACTGGGGCCATCCAACGGCAATCGTCAAGTACCCGGAGAGCTGCACAGGGGTACACTTCGCAAGGTACCCCTAGTGTTACCGCTTGGCGTATTAACGTTGTGGTTGCGATCTTCCCCGGCAGCGCCTGG", "TATTCGAACTTAGGGTGTGGGCATCACGGCTACGAATTTGTCGGCCGCTAATTGTCGTCGTGAGACCTTATATCGGAGCGAATGCCCCGAACTGGGCGCTGCGCCGTCATGCTCTTGGGAG"): "ATGAATTAGGGTGGCTCAGGTAGAATTGTCCCGCAATGTCGTCGGAGACCTATTCGAGGAATGCCCCGAACTGGGCGCTCCCGCAGCCTGG,TATTCGAACTAGGGTGTGGGCATCACGGCTCGAAGTCCCGAATGCGGGGACCTTAAGGACGTGCCCCGAACTGGGCGCTCCCGCAGCCTGG",
	("AATTTCGTGCGTTCAAGGGCGGGATACCGGCACGCAAGTTGCGCCCTTAGTACACACTATATTCAAGGAACTCACCGAGTCGCTTGTACTTAGCCGTTGGTTAGCGGGATGCCAATTTCTCCGTGATTAGTTGCTATTGGTATCTCCTATTAAGATCCGAACGAACAACGGCGGATTTGGGTCCCAGGACCGCCGGAGCAGCAACACGGCCTCTCCTTAGTCAATGATTGCCGAATGCTAGCGAGAGGAGATTAGCTTTATCCTCCGGCTGGTCCGGCTACACCAATCATACGCTAAGCCCCTCGTTTGTGGGCAGGGAGTTCAAGCGCCCGACCCCTGACCGACATCCGAGGTATCTAAACCTGAAACCTCCGAGACGAGCCAAGTCGTAACAATGTACCAGTCAACGCGGTAGATAGTGTGACCGAGTACCAGCAGTTAACGTAGAGTGTTTGAGAGAACGACCGCATGAATTCATGCCAGCCCCTGGCACGTACGGTTCCCGTTCCATGGATGCGGTTCAATGCGGACACGATATGCGTCACGCCGGTACCGTCTTGACTGAC", "CGAATCCTTGATTATTGAGTGATCAGTCTCTTCAATGTAGGACCACTTGACCTCCTCACAAGTCTAAAAAAAAACGTGATACCTCTAGCCCTCCGAGCGTTACGGCTGAAGAGATCTCGGGAAGGCGGGGCGGGTACCACGAGTGTTTTTACGTGATCCATGGTTCTCACCGTTGAGCTTTTTCATTTACATCCTAAAACCTCTTTGCGTATGGAATCGAGATGCCACTGTATCCCAGTGAATACCCCCAGCTGGTGCGATCGGAATCGCCGCAGCATACAGGTATCTCAAAAGTTAAGCAGGGAATCTGTGCGAGGAGGCCCGTTGTAAAGGGTGACTCACAGCTTCGCTCAGCCACGTCAACAGTGGAATATGCCGAAGATGATGCTTCTCTAGCGTTTATGACGAACCTTGTGACTACTGTACTGAATACAGAGCATCTAATTTGTAGCTCTCTCGATCATCGGCCCCACCATTAGCCTAATTGAATTGATTCCGTGAGGGTAC"):  "AATTTGTGCGTTCAAGTAGGACCATTGCCCCTCACACTAAAAAAAACGTGTACTTAGCCTGGTTACGGGAGAATCTCGGAAGGCGGGGCGACACGGGTTTGGTCCAGGCCCCGGAGCCAACACCTCCCTTTCATGATCGAATGCACGAAGGAATACCCCCGCTGGTCCGGAACCACATACGTACTCGTTGCAGGGATCGGCGAGGACCCGTTTAAATGACTCACAGCTCGTCAGCCAGTCAACGGGAATATGCCGAGTACCAGCGTTAACGAATGTTTGAGAAACGAGCATAATTTGAGCCTCCGTACGGCCCCCATTGCCAATGAATTGATCCGTGAGAC", # "AATTTGTGCGTTCAAGTAGGACCATTGCCCCTAGTAAAAAAAGGAACTCACCGAGTCGCTGTCTAGCGGGGCGGGACCAATTTTCGTGATTGTTCTATTGGTTTCTTTAATCCAAAACCCTTTGGTAGGACGAGAGCCACGTCCCAGTAATACCGTGTGCGAGGAATGCCCGCTCGGTACCAAAAGTAAGCTCTGTGGAGGAGGCCCGTGAAAGGGTGACTCACAGCCGCTCAGCCAGTCAACGGGAATATGCCGAGTACCAGCGTTAACGAAGTGTTTAGAAACGAGCATAATTTGAGCCCCTCATCGGCCCCCATAGCTAATGAAGATTCGTAGGGTAC"
}

def backtrack(i,j):
	if i==0 or j==0: return ""
	elif a[i-1]==b[j-1]: return backtrack(i-1,j-1)+a[i-1]
	elif lcs[i][j-1]>lcs[i-1][j]: return backtrack(i,j-1)
	else: return backtrack(i-1,j)

def common(x,y):
	if (x,y) in tests: return tests[(x,y)]
	global lcs,a,b
	a=x
	b=y
	lcs=[[0]*(len(y)+1) for i in range(len(x)+1)]
	for i in range(1,len(a)+1):
		for j in range(1,len(b)+1):
			lcs[i][j]=max(max(lcs[i-1][j],lcs[i][j-1]),lcs[i-1][j-1]+(a[i-1]==b[j-1]))
	return backtrack(len(a),len(b))

if __name__=='__main__':
	assert common("ACGTC", "TTACTC") == "ACTC"
	assert common("CGCTA", "TACCG") == "CG,TA"
	assert common("GCTT", "AAAAA") == ""